# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Levin_power
else:
    import _Levin_power

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Levin_power(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, z_bg, chi_bg, chi_cl, kernel, k_pk, z_pk, pk):
        _Levin_power.Levin_power_swiginit(self, _Levin_power.new_Levin_power(z_bg, chi_bg, chi_cl, kernel, k_pk, z_pk, pk))
    __swig_destroy__ = _Levin_power.delete_Levin_power

    def init_splines(self, z_bg, chi_bg, chi_cl, kernel, k_pk, z_pk, pk):
        return _Levin_power.Levin_power_init_splines(self, z_bg, chi_bg, chi_cl, kernel, k_pk, z_pk, pk)

    def kernel(self, chi, i):
        return _Levin_power.Levin_power_kernel(self, chi, i)

    def chi_of_z(self, z):
        return _Levin_power.Levin_power_chi_of_z(self, z)

    def z_of_chi(self, chi):
        return _Levin_power.Levin_power_z_of_chi(self, chi)

    def power_linear(self, z, k):
        return _Levin_power.Levin_power_power_linear(self, z, k)

    def power_nonlinear(self, z, k):
        return _Levin_power.Levin_power_power_nonlinear(self, z, k)

    def w(self, chi, k, ell, i):
        return _Levin_power.Levin_power_w(self, chi, k, ell, i)

    def A_matrix(self, i, j, chi, k, ell):
        return _Levin_power.Levin_power_A_matrix(self, i, j, chi, k, ell)

    def allocate(self):
        return _Levin_power.Levin_power_allocate(self)

    def free(self):
        return _Levin_power.Levin_power_free(self)

    def setNodes(self, A, B, col):
        return _Levin_power.Levin_power_setNodes(self, A, B, col)

    def basis_function(self, A, B, x, m):
        return _Levin_power.Levin_power_basis_function(self, A, B, x, m)

    def basis_function_prime(self, A, B, x, m):
        return _Levin_power.Levin_power_basis_function_prime(self, A, B, x, m)

    def F_linear(self, chi, i_tomo, k):
        return _Levin_power.Levin_power_F_linear(self, chi, i_tomo, k)

    def F_nonlinear(self, chi, i_tomo, k):
        return _Levin_power.Levin_power_F_nonlinear(self, chi, i_tomo, k)

    def solve_LSE(self, A, B, col, x_j, i_tomo, k, ell, linear):
        return _Levin_power.Levin_power_solve_LSE(self, A, B, col, x_j, i_tomo, k, ell, linear)

    def p(self, A, B, i, x, col, c):
        return _Levin_power.Levin_power_p(self, A, B, i, x, col, c)

    def integrate(self, A, B, col, i_tomo, k, ell, linear):
        return _Levin_power.Levin_power_integrate(self, A, B, col, i_tomo, k, ell, linear)

    def iterate(self, A, B, col, i_tomo, k, ell, smax, verbose, linear):
        return _Levin_power.Levin_power_iterate(self, A, B, col, i_tomo, k, ell, smax, verbose, linear)

    def findMax(self, vec):
        return _Levin_power.Levin_power_findMax(self, vec)

    def linear_spaced(self, min, max, N):
        return _Levin_power.Levin_power_linear_spaced(self, min, max, N)

    def levin_integrate_bessel(self, k, ell, i_tomo, linear):
        return _Levin_power.Levin_power_levin_integrate_bessel(self, k, ell, i_tomo, linear)

    def Limber(self, ell, i_tomo, j_tomo, linear):
        return _Levin_power.Levin_power_Limber(self, ell, i_tomo, j_tomo, linear)

    @staticmethod
    def Limber_kernel(arg1, arg2):
        return _Levin_power.Levin_power_Limber_kernel(arg1, arg2)

    def set_auxillary_splines(self, use_limber, ell, linear):
        return _Levin_power.Levin_power_set_auxillary_splines(self, use_limber, ell, linear)

    def free_auxillary_splines(self):
        return _Levin_power.Levin_power_free_auxillary_splines(self)

    def auxillary_weight(self, i_tomo, k):
        return _Levin_power.Levin_power_auxillary_weight(self, i_tomo, k)

    @staticmethod
    def k_integration_kernel(arg1, arg2):
        return _Levin_power.Levin_power_k_integration_kernel(arg1, arg2)

    def C_ell_full(self, i_tomo, j_tomo):
        return _Levin_power.Levin_power_C_ell_full(self, i_tomo, j_tomo)

    def all_C_ell(self, ell, linear):
        return _Levin_power.Levin_power_all_C_ell(self, ell, linear)

# Register Levin_power in _Levin_power:
_Levin_power.Levin_power_swigregister(Levin_power)

def Levin_power_Limber_kernel(arg1, arg2):
    return _Levin_power.Levin_power_Limber_kernel(arg1, arg2)

def Levin_power_k_integration_kernel(arg1, arg2):
    return _Levin_power.Levin_power_k_integration_kernel(arg1, arg2)



